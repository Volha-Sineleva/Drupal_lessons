<?php

/**
 * Implements hook_entity_info().
 */
function training4_entity_info() {

  $info['training4_message'] = array(
    'label' => t('Messages'),
    'controller class' => 'Training4MessageController',
    'base table' => 'training4_message',
    'access callback' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function training4_menu() {

  $menu['message'] = array(
    'title' => 'Message',
    'page callback' => 'training4_message_page',
    'access callback' => TRUE,
  );
  $menu['message/add'] = array(
    'title' => 'Add a Message',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('training4_message_form'),
    'access callback' => TRUE,
  );
  // Individual message page.
  $menu['message/%'] = array(
    'title callback' => 'training4_message_entity_title',
    'title arguments' => array(1),
    'page callback' => 'training4_message_entity_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  // 'View' tab for an individual message page.
  $menu['message/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // 'Edit' tab for an individual message page.
  $menu['message/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('training4_message_form', 1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  return $menu;
}

/**
 * Page callback function for /message.
 */
function training4_message_page() {

  $form['info'] = array();
  $entities = training4_message_load_multiple();
  if (!empty($entities)) {
    $text = 'There are some messages on the site. Here is the list of messages:';
    $form['message_table'] = training4_message_table($entities);
  }
  else {
    $text = t('There are no messages on the site.');
  }
  $form['info'] = array(
    '#type' => 'item',
    '#markup' => $text,
  );

  return $form;
}

/**
 * Custom function to create a sortable table of messages with pager.
 */
function training4_message_table($entities) {

  $header = array(
    'id' => array('data' => t('ID'), 'field' => 'm.id', 'sort' => 'asc'),
    'author' => array('data' => t('Author'), 'field' => 'm.uid'),
    'type'  => array('data' => t('Type'), 'field' => 'm.type'),
    'title' => array('data' => t('Title'), 'field' => 'm.title'),
    'body' => array('data' => t('Body'), 'field' => 'm.body'),
    t('Actions'),
  );

  //I use db_select, as asked in the task
  $query = db_select('training4_message', 'm')
    ->extend('TableSort')
    ->extend('PagerDefault')->limit(5)
    ->fields('m')
    ->orderByHeader($header);
  $result = $query->execute();


  foreach ($result as $message) {
    $user = entity_load('user', array($message->uid));
    $rows[] = array(
      'data' => array(
        'id' => $message->id,
        'author' => $user[$message->uid]->name,
        'type' => $message->type,
        'title' => $message->title,
        'body' => $message->body,
        'actions' => l(t('Edit'), 'message/' . $message->id),
      ),
    );
  }

  $table[] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );
  $table[] = array(
    '#theme' => 'pager',
  );

  return $table;
}

/**
 * Page callback function for /message/%.
 */
function training4_message_entity_page($message_id) {

  $entity = training4_message_load($message_id);
  $content = array(
    'title' => array(
      '#type' => 'item',
      '#title' => 'Message title',
      '#markup' => $entity->title,
    ),
    'body' => array(
      '#type' => 'item',
      '#title' => 'Message text',
      '#markup' => $entity->body,
    ),
  );

  return $content;
}

/**
 * Title callback function for /message/%.
 */
function training4_message_entity_title($message_id) {
  return t('Message (id=@id)', array('@id' => $message_id));
}

/**
 * Custom form function to create/edit messages.
 */
function training4_message_form($form, &$form_state, $id = NULL) {

  // New entity is created for "add message" ($id = NULL)
  // and existing is loaded for "edit" ($id is defined).
  $entity = $id?
    training4_message_load($id)
    : entity_get_controller('training4_message')->create();

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Message Title'),
    '#required' => TRUE,
    '#default_value' => $entity->title,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Message Text'),
    '#required' => TRUE,
    '#default_value' => $entity->body,
  );
  $form['message_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );

  return $form;
}

/**
 * Submit function for create/edit messages form.
 */
function training4_message_form_submit($form, &$form_state) {
  $entity = $form_state['values']['message_entity'];
  $entity->title = $form_state['values']['title'];
  $entity->body = $form_state['values']['body'];
  $entity = training4_message_save($entity);
  $form_state['redirect'] = 'message';
  drupal_set_message($entity->title . ' is submitted!');
}

/**
 * Save function for create/edit messages form.
 */
function training4_message_save(&$entity) {
  return entity_get_controller('training4_message')->save($entity);
}

/**
 * Custom function to load single entity of the type 'training4_message'.
 */
function training4_message_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entities_message = training4_message_load_multiple($ids, array(), $reset);
  return $entities_message ? reset($entities_message) : FALSE;
}

/**
 * Custom function to load all the entities of the type 'training4_message'.
 */
function training4_message_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('training4_message', $ids, $conditions, $reset);
}

/**
 * Interface Training4MessageControllerInterface.
 */
interface Training4MessageControllerInterface
  extends DrupalEntityControllerInterface {

  public function create();

  public function save($entity);

}

/**
 * Class Training4MessageController.
 */
class Training4MessageController
  extends DrupalDefaultEntityController
  implements Training4MessageControllerInterface {

  /**
   * Function to create and return an empty message entity.
   */
  public function create() {

    $entity = new stdClass();
    $entity->id = 0;
    $entity->uid = 0;
    $entity->type = rand(1, 5);
    $entity->title = '';
    $entity->body = '';

    return $entity;
  }

  /**
   * Function to save message entity.
   */
  public function save($entity) {

    global $user;
    $record = array(
      'id' => $entity->id,
      'uid' => $user->uid,
      'type' => $entity->type,
      'title' => $entity->title,
      'body' => $entity->body,
    );
    $primary_keys = $entity->id? array('id') : array();
    drupal_write_record('training4_message', $record, $primary_keys);

    return $entity;
  }
}

/**
 * ----------------------
 * A new part of code - for the last task of the 4th hometask - "Access Control".
 * ----------------------
 */

/**
 * Implements hook_menu_alter().
 */
function training4_menu_alter(&$menu) {

  $menu['articles'] = array(
    'title' => 'Articles',
    'page callback' => 'training4_articles_page',
    'access callback' => TRUE,
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function training4_permission() {
  return array(
    'access articles' => array(
      'title' => t('Access articles'),
      'description' => t('May view articles of other users.'),
    ),
    'edit articles' => array(
      'title' => t('Edit articles'),
      'description' => t('May edit articles of other users.'),
    ),
  );
}

/**
 * Implements hook_node_grants().
 */
function training4_node_grants($account, $op) {

  // Check if user have ever created messages, and if yes
  // grant him rights to access articles
  $query = db_select('training4_message', 'm')
    ->fields('m', array('uid'))
    ->condition('uid', $account->uid, '=');
  $result = $query->execute();
  $result = $result->fetchAll();

  if ($result || user_access('access articles', $account)) {
    $grants['access articles'] = array(1);
  }
  if (user_access('edit articles', $account)) {
    $grants['edit articles'] = array(2);
  }
  $grants['article owner'] = array($account->uid);
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function training4_node_access_records($node) {

  if ($node->status) {
    $grants[] = array(
      'realm' => 'access articles',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  $grants[] = array(
    'realm' => 'edit articles',
    'gid' => 2,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 0,
  );
  $grants[] = array(
    'realm' => 'article owner',
    'gid' => $node->uid,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 0,
  );

  return $grants;
}

/**
 * Callback function for /articles.
 */
function training4_articles_page() {

  $nids = db_query('SELECT nid FROM {node} WHERE type =  :type', array(
    ':type' => 'article',
  ))->fetchCol();

  if ($nids) {
    foreach ($nids as $nid) {
      $links[] = array(
        'title' => 'Go to ' . 'node/' . $nid,
        'href' => 'node/' . $nid
      );
    }
    $content = array(
      '#theme' => 'links',
      '#links' => $links,
    );
  }
  else {
    $content = 'There are no any articles on the site. Please, create some.';
  }

  return $content;
}
